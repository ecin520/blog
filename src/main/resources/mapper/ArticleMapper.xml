<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pytap.blog.dao.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.pytap.blog.model.domain.Article">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="creater" jdbcType="BIGINT" property="creater" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="generalize" jdbcType="VARCHAR" property="generalize" />
    <result column="time" jdbcType="VARCHAR" property="time" />
    <result column="show_image" jdbcType="VARCHAR" property="showImage" />
    <result column="recommend" jdbcType="INTEGER" property="recommend" />
    <result column="likes" jdbcType="BIGINT" property="likes" />
    <result column="views" jdbcType="BIGINT" property="views" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.pytap.blog.model.domain.Article">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, creater, title, generalize, time, show_image, recommend, likes, views
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.pytap.blog.model.domain.ArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.pytap.blog.model.domain.ArticleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from article
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.pytap.blog.model.domain.ArticleExample">
    delete from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pytap.blog.model.domain.Article">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into article (creater, title, generalize, 
      time, show_image, recommend, 
      likes, views, content
      )
    values (#{creater,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, #{generalize,jdbcType=VARCHAR}, 
      #{time,jdbcType=VARCHAR}, #{showImage,jdbcType=VARCHAR}, #{recommend,jdbcType=INTEGER}, 
      #{likes,jdbcType=BIGINT}, #{views,jdbcType=BIGINT}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.pytap.blog.model.domain.Article">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="creater != null">
        creater,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="generalize != null">
        generalize,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="showImage != null">
        show_image,
      </if>
      <if test="recommend != null">
        recommend,
      </if>
      <if test="likes != null">
        likes,
      </if>
      <if test="views != null">
        views,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="creater != null">
        #{creater,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="generalize != null">
        #{generalize,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=VARCHAR},
      </if>
      <if test="showImage != null">
        #{showImage,jdbcType=VARCHAR},
      </if>
      <if test="recommend != null">
        #{recommend,jdbcType=INTEGER},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=BIGINT},
      </if>
      <if test="views != null">
        #{views,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pytap.blog.model.domain.ArticleExample" resultType="java.lang.Long">
    select count(*) from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.creater != null">
        creater = #{record.creater,jdbcType=BIGINT},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.generalize != null">
        generalize = #{record.generalize,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=VARCHAR},
      </if>
      <if test="record.showImage != null">
        show_image = #{record.showImage,jdbcType=VARCHAR},
      </if>
      <if test="record.recommend != null">
        recommend = #{record.recommend,jdbcType=INTEGER},
      </if>
      <if test="record.likes != null">
        likes = #{record.likes,jdbcType=BIGINT},
      </if>
      <if test="record.views != null">
        views = #{record.views,jdbcType=BIGINT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update article
    set id = #{record.id,jdbcType=BIGINT},
      creater = #{record.creater,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      generalize = #{record.generalize,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=VARCHAR},
      show_image = #{record.showImage,jdbcType=VARCHAR},
      recommend = #{record.recommend,jdbcType=INTEGER},
      likes = #{record.likes,jdbcType=BIGINT},
      views = #{record.views,jdbcType=BIGINT},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article
    set id = #{record.id,jdbcType=BIGINT},
      creater = #{record.creater,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      generalize = #{record.generalize,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=VARCHAR},
      show_image = #{record.showImage,jdbcType=VARCHAR},
      recommend = #{record.recommend,jdbcType=INTEGER},
      likes = #{record.likes,jdbcType=BIGINT},
      views = #{record.views,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pytap.blog.model.domain.Article">
    update article
    <set>
      <if test="creater != null">
        creater = #{creater,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="generalize != null">
        generalize = #{generalize,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=VARCHAR},
      </if>
      <if test="showImage != null">
        show_image = #{showImage,jdbcType=VARCHAR},
      </if>
      <if test="recommend != null">
        recommend = #{recommend,jdbcType=INTEGER},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=BIGINT},
      </if>
      <if test="views != null">
        views = #{views,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.pytap.blog.model.domain.Article">
    update article
    set creater = #{creater,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      generalize = #{generalize,jdbcType=VARCHAR},
      time = #{time,jdbcType=VARCHAR},
      show_image = #{showImage,jdbcType=VARCHAR},
      recommend = #{recommend,jdbcType=INTEGER},
      likes = #{likes,jdbcType=BIGINT},
      views = #{views,jdbcType=BIGINT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pytap.blog.model.domain.Article">
    update article
    set creater = #{creater,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      generalize = #{generalize,jdbcType=VARCHAR},
      time = #{time,jdbcType=VARCHAR},
      show_image = #{showImage,jdbcType=VARCHAR},
      recommend = #{recommend,jdbcType=INTEGER},
      likes = #{likes,jdbcType=BIGINT},
      views = #{views,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>